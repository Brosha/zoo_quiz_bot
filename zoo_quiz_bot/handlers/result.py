import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from config import OPECA_URL, SUPPORT_CONTACT
from data.animals import ANIMALS
from utils.logger import logger


async def show_result(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    try:
        scores = context.user_data.get("scores", {})
        if not scores:
            await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start")
            return

        max_score = max(scores.values())
        max_animals = [animal for animal, score in scores.items() if score == max_score]
        totem_animal = random.choice(max_animals)
        animal_info = ANIMALS.get(totem_animal, {})

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        text = (
            f"{animal_info.get('emoji', 'ü¶Ñ')} *–¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {totem_animal}!*\n\n"
            f"{animal_info.get('desc', '–¢—ã –æ—Å–æ–±–µ–Ω–Ω—ã–π!')}\n\n"
            "üéØ *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:* "
            f"{random.choice(animal_info.get('facts', ['–°–µ–∫—Ä–µ—Ç—ã —Ö—Ä–∞–Ω–∏—Ç—å —É–º–µ—é!']))}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("–°—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º üåø", url=OPECA_URL)],
            [
                InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º üìû", url=f"https://t.me/{SUPPORT_CONTACT}"),
                InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ üîÑ", callback_data="start_quiz")
            ]
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.effective_message.reply_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))

        logger.info(f"User {update.effective_user.id} –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {totem_animal}")
        context.user_data.clear()

    except Exception as e:
        logger.error(f"Result error: {e}")
        await update.effective_message.reply_text("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")